" Required
set nocompatible

" Show line numbers
set number relativenumber

" Set normal line numbers when in insert mode
autocmd InsertEnter * :set number norelativenumber
autocmd InsertLeave * :set number relativenumber

" Backspace like a normal person
set backspace=indent,eol,start

" Allow yank to go to system clipboard
set clipboard=unnamed

" Show tabs and newlines
set listchars=tab:▸\ ,eol:¬
set list

set eol

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'gmarik/Vundle.vim'

" Dracula Theme
Plug 'dracula/vim'

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 't9md/vim-ruby-xmpfilter'
Plug 'tpope/vim-rails'

" Coffeescript
Plug 'kchmck/vim-coffee-script'

" Elixir
Plug 'elixir-lang/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'https://www.github.com/slime-lang/vim-slime-syntax.git'

" JSON
Plug 'elzr/vim-json'

" Go
Plug 'fatih/vim-go'
let g:gofmt_command = "goimports"

" Add the fzf.vim plugin to wrap fzf:
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
let g:fzf_files_options =
      \ '--reverse ' .
      \ '--preview-window top:60% ' .
      \ '--preview "(bat --color "always" {} || cat {}) 2> /dev/null | head -'
      \ . &lines . '"'

" Xmpfilter
autocmd FileType ruby nmap <buffer> <D-m> <Plug>(xmpfilter-mark)
autocmd FileType ruby xmap <buffer> <D-m> <Plug>(xmpfilter-mark)
autocmd FileType ruby imap <buffer> <D-m> <Plug>(xmpfilter-mark)

autocmd FileType ruby nmap <buffer> <D-r> <Plug>(xmpfilter-run)
autocmd FileType ruby xmap <buffer> <D-r> <Plug>(xmpfilter-run)
autocmd FileType ruby imap <buffer> <D-r> <Plug>(xmpfilter-run)

" Bad Whitespace
Plug 'bitc/vim-bad-whitespace'

" Git Gutter
Plug 'airblade/vim-gitgutter'

" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
set laststatus=2
let g:airline_powerline_fonts = 1

" Syntastic
Plug 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

map <c-p> :FZF<cr>

nnoremap <space>f :Rg!<space><c-r><c-w><cr>
xnoremap <space>f y:Rg!<space><c-r>0<cr>
"
" Nerd Tree
Plug 'preservim/nerdtree'
autocmd StdinReadPre * let s:std_in=1
autocmd vimenter * NERDTree
autocmd VimEnter * if argc() | wincmd p | endif
let g:NERDTreeNodeDelimiter = "\u00a0"
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" End wise
Plug 'tpope/vim-endwise'

" Silver Searcher
let g:ackprg = 'ag --vimgrep'

" Relative line numbers
Plug 'jeffkreeftmeijer/vim-numbertoggle'

" Incsearch
Plug 'haya14busa/incsearch.vim'

Plug 'gelguy/wilder.nvim'

Plug 'APZelos/blamer.nvim'
let g:blamer_enabled = 1

Plug 'neoclide/coc.nvim', {'branch': 'release'}
function! SetupCommandAbbrs(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction

" Use C to open coc config
call SetupCommandAbbrs('C', 'CocConfig')

command -nargs=0 Swagger :CocCommand swagger.render

Plug 'glepnir/galaxyline.nvim' , {'branch': 'main'}

Plug 'kyazdani42/nvim-web-devicons'

Plug 'kyazdani42/nvim-tree.lua'

Plug 'hashivim/vim-terraform'

" All plugins defined
call plug#end()

" Set incsearch settings
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

nnoremap <leader>. :CtrlPTag<cr>

nnoremap <F5> :silent update<Bar>silent !open % -a /Applications/Brave\ Browser.app %:p &<CR>

" Set color scheme
let g:dracula_colorterm=0
let g:dracula_italic = 0
colorscheme dracula
highlight Normal ctermbg=None

" Set up Slime to work with .slim files
autocmd BufNewFile,BufRead *.slim set filetype=slime

" Ruby, JS, Elixir file settings
au BufRead,BufNewFile *.js,*.rb,*.exs,*.ex,*.eex,*.coffee,*.slim,*.rake,*.json         set tabstop=2
au BufRead,BufNewFile *.js,*.rb,*.exs,*.ex,*.eex,*.coffee,*.slim,*.rake,*.json         set softtabstop=2
au BufRead,BufNewFile *.js,*.rb,*.exs,*.ex,*.eex,*.coffee,*.slim,*.rake,*.json         set shiftwidth=2
au BufRead,BufNewFile *.js,*.rb,*.exs,*.ex,*.eex,*.coffee,*.slim,*.rake,*.json         set expandtab
au BufRead,BufNewFile *.js,*.rb,*.exs,*.ex,*.eex,*.coffee,*.slim,*.rake,*.json         set smarttab
au BufRead,BufNewFile *.js,*.rb,*.exs,*.ex,*.eex,*.coffee,*.slim,*.rake,*.json         set autoindent
au BufRead,BufNewFile *.rb                                                             match Error /\%81v.\+/

au BufRead,BufNewFile *.js,*.rb,*.exs,*.ex,*.eex,*.coffee,*.slim,*.rake,*.json         match BadWhitespace /^\t\+/
au BufRead,BufNewFile *.js,*.rb,*.exs,*.ex,*.eex,*.coffee,*.slim,*.rake,*.json         match BadWhitespace /\s\+$/

nnoremap <C-n> :NvimTreeToggle<CR>
nnoremap <leader>r :NvimTreeRefresh<CR>
nnoremap <leader>n :NvimTreeFindFile<CR>
" NvimTreeOpen, NvimTreeClose and NvimTreeFocus are also available if you need them

set termguicolors " this variable must be enabled for colors to be applied properly

" a list of groups can be found at `:help nvim_tree_highlight`
highlight NvimTreeFolderIcon guibg=blue
